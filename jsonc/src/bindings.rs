/* automatically generated by rust-bindgen 0.72.0 */

pub const jsonc_value_type_JSONC_VALUE_TYPE_NULL: jsonc_value_type = 0;
pub const jsonc_value_type_JSONC_VALUE_TYPE_BOOLEAN: jsonc_value_type = 1;
pub const jsonc_value_type_JSONC_VALUE_TYPE_NUMBER: jsonc_value_type = 2;
pub const jsonc_value_type_JSONC_VALUE_TYPE_STRING: jsonc_value_type = 3;
pub const jsonc_value_type_JSONC_VALUE_TYPE_ARRAY: jsonc_value_type = 4;
pub const jsonc_value_type_JSONC_VALUE_TYPE_OBJECT: jsonc_value_type = 5;
pub type jsonc_value_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jsonc_array {
    pub values: *mut jsonc_value,
    pub count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jsonc_array"][::std::mem::size_of::<jsonc_array>() - 16usize];
    ["Alignment of jsonc_array"][::std::mem::align_of::<jsonc_array>() - 8usize];
    ["Offset of field: jsonc_array::values"][::std::mem::offset_of!(jsonc_array, values) - 0usize];
    ["Offset of field: jsonc_array::count"][::std::mem::offset_of!(jsonc_array, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jsonc_object {
    pub entries: *mut jsonc_object_entry,
    pub count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jsonc_object"][::std::mem::size_of::<jsonc_object>() - 16usize];
    ["Alignment of jsonc_object"][::std::mem::align_of::<jsonc_object>() - 8usize];
    ["Offset of field: jsonc_object::entries"]
        [::std::mem::offset_of!(jsonc_object, entries) - 0usize];
    ["Offset of field: jsonc_object::count"][::std::mem::offset_of!(jsonc_object, count) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jsonc_value {
    pub type_: jsonc_value_type,
    pub value: jsonc_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jsonc_value__bindgen_ty_1 {
    pub boolean: bool,
    pub number: f64,
    pub string: *mut ::std::os::raw::c_char,
    pub object: jsonc_object,
    pub array: jsonc_array,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jsonc_value__bindgen_ty_1"]
        [::std::mem::size_of::<jsonc_value__bindgen_ty_1>() - 16usize];
    ["Alignment of jsonc_value__bindgen_ty_1"]
        [::std::mem::align_of::<jsonc_value__bindgen_ty_1>() - 8usize];
    ["Offset of field: jsonc_value__bindgen_ty_1::boolean"]
        [::std::mem::offset_of!(jsonc_value__bindgen_ty_1, boolean) - 0usize];
    ["Offset of field: jsonc_value__bindgen_ty_1::number"]
        [::std::mem::offset_of!(jsonc_value__bindgen_ty_1, number) - 0usize];
    ["Offset of field: jsonc_value__bindgen_ty_1::string"]
        [::std::mem::offset_of!(jsonc_value__bindgen_ty_1, string) - 0usize];
    ["Offset of field: jsonc_value__bindgen_ty_1::object"]
        [::std::mem::offset_of!(jsonc_value__bindgen_ty_1, object) - 0usize];
    ["Offset of field: jsonc_value__bindgen_ty_1::array"]
        [::std::mem::offset_of!(jsonc_value__bindgen_ty_1, array) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jsonc_value"][::std::mem::size_of::<jsonc_value>() - 24usize];
    ["Alignment of jsonc_value"][::std::mem::align_of::<jsonc_value>() - 8usize];
    ["Offset of field: jsonc_value::type_"][::std::mem::offset_of!(jsonc_value, type_) - 0usize];
    ["Offset of field: jsonc_value::value"][::std::mem::offset_of!(jsonc_value, value) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jsonc_object_entry {
    pub key: *mut ::std::os::raw::c_char,
    pub value: jsonc_value,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jsonc_object_entry"][::std::mem::size_of::<jsonc_object_entry>() - 32usize];
    ["Alignment of jsonc_object_entry"][::std::mem::align_of::<jsonc_object_entry>() - 8usize];
    ["Offset of field: jsonc_object_entry::key"]
        [::std::mem::offset_of!(jsonc_object_entry, key) - 0usize];
    ["Offset of field: jsonc_object_entry::value"]
        [::std::mem::offset_of!(jsonc_object_entry, value) - 8usize];
};
pub type err_t = bool;
unsafe extern "C" {
    pub fn jsonc_parse(
        source: *const ::std::os::raw::c_char,
        out: *mut jsonc_value,
        out_is_error: *mut bool,
    ) -> err_t;
}
unsafe extern "C" {
    pub fn jsonc_free(value: jsonc_value);
}
